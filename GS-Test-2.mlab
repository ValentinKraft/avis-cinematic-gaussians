// MDL v1 utf8
mevislabVersion = 4.0.70.335
network {
  watchlist = ""
}
module AHrEZPlanner {
  internal {
    frame = "761 741 112 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1013 136 1702 1141"
        relativePosition = "0.0419 -0.4016"
        sizeHint = "686 433"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = AHrEZPlanner
  }
}
module RunPythonScript {
  internal {
    frame = "1109 601 232 64"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "290 144 836 989"
        relativePosition = "-0.1312 -0.3741"
        sizeHint = "628 303"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = ExportForCinematicGaussians
    in0 = ""
    in1 = ""
    in2 = ""
    in3 = ""
    in4 = ""
    in5 = ""
    in6 = ""
    in7 = ""
    in8 = ""
    in9 = ""
    inComment0 = in0
    inComment1 = in1
    inComment2 = in2
    inComment3 = in3
    inComment4 = in4
    inComment5 = in5
    inComment6 = in6
    inComment7 = in7
    inComment8 = in8
    inComment9 = in9
    autoApply0 = TRUE
    autoApply1 = TRUE
    autoApply2 = TRUE
    autoApply3 = TRUE
    autoApply4 = TRUE
    autoApply5 = TRUE
    autoApply6 = TRUE
    autoApply7 = TRUE
    autoApply8 = TRUE
    autoApply9 = TRUE
    out0 = ""
    out1 = ""
    out2 = ""
    out3 = ""
    out4 = ""
    out5 = ""
    out6 = ""
    out7 = ""
    out8 = ""
    out9 = ""
    outComment0 = out0
    outComment1 = out1
    outComment2 = out2
    outComment3 = out3
    outComment4 = out4
    outComment5 = out5
    outComment6 = out6
    outComment7 = out7
    outComment8 = out8
    outComment9 = out9
    initCode = "# For backward compatibility, set up CTX as alias for ctx
CTX = ctx # ctx is the network's context, not RunPythonScript's"
    wakeUpCode = ""
    code = "*import random
import os
import json
import numpy as np

extent = 1000
output_path = "C:/DEV/TESTS/gs/cinematic-gaussians/scene"
camera_angle_x_deg = 45.0  # Horizontaler Öffnungswinkel in Grad
transforms = {
    "camera_angle_x": np.deg2rad(camera_angle_x_deg),
    "w": 2048,
    "h": 2048,
    "frames": []
}

for i in range(50):
  x = random.randint(-extent,extent)
  y = random.randint(-extent,extent)
  z = random.randint(-extent,extent)
  ctx.field("RotateAtTarget.inPosition").setValue([x,y,z])
  ctx.field("RotateAtTarget.update").touch()
  ctx.field("OffscreenRenderer.update").touch()
  ctx.field("ImageSave.filename").setValue(f"{output_path}/images/{i}.jpg")
  ctx.field("ImageSave.save").touch()
  
  # export camera pose data
  view = ctx.field("SoCameraAccess.viewingMatrix").value
  view_matrix = np.array(view).reshape((4, 4))
  world_matrix = np.linalg.inv(view_matrix).transpose()
  
  #print("Translation =", world_matrix[:3, 3])

  transforms["frames"].append({
        "file_path": f"{i}.jpg",  # relativer Pfad im Zielrepo
        "transform_matrix": world_matrix.tolist()
    })


# === JSON schreiben ===
with open(os.path.join(output_path, "transforms.json"), "w") as f:
    json.dump(transforms, f, indent=4)

print(f"data exported to {output_path}")*"
    finalizeCode = ""
    showFields = FALSE
    showInitCode = FALSE
    showWakeUpCode = FALSE
    showCode = TRUE
    showFinalizeCode = FALSE
    showConsole = FALSE
  }
}
module SoPerspectiveCamera {
  internal {
    frame = "509 685 152 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1991 200 450 258"
        relativePosition = "0.1442 -0.3556"
        sizeHint = "406 258"
        wasOpen = yes
      }
    }
  }
  fields {
    instanceName = SoPerspectiveCamera
    viewportMapping = ADJUST_CAMERA
    position = "-5 -6 -63"
    orientation = "0.940063893795013 -0.340350031852722 -0.0210165344178677 3.02562546730042"
    aspectRatio = 1
    nearDistance = 0.53953755
    farDistance = 540.61768
    focalDistance = 1836.3105
    heightAngle = 0.78539819
  }
}
module OffscreenRenderer {
  internal {
    frame = "653 397 168 72"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "1873 737 296 370"
        relativePosition = "0.0875 0.0302"
        sizeHint = "268 370"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = OffscreenRenderer
    transparencyType = BLEND
    imageType = RGB
    bufferType = AUTO
    stencilBuffer = FALSE
    size = "2048 2048"
    pixelScale = 1
    bgColor = "0 0 0"
    enableMultiSampling = FALSE
    multiSampling = 16
  }
}
module SoGroup {
  internal {
    frame = "645 581 184 56"
    moduleGroupName = ""
  }
  fields {
    instanceName = SoGroup
  }
}
module SoCameraAlignedRotation {
  internal {
    frame = "489 773 176 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1580 717 307 66"
        relativePosition = "0.0041 0.0158"
        sizeHint = "279 66"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = SoCameraAlignedRotation
    orientationMode = pointOrientation
    rotationAxis = "0 1 0"
  }
}
module RotateAtTarget {
  internal {
    frame = "873 653 144 56"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "914 755 370 451"
        relativePosition = "-0.1805 0.0431"
        sizeHint = "339 451"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = RotateAtTarget
    inPosition = "-5 -6 -63"
    inTarget = "0 0 0"
    inUpVector = "0 0 1"
    onInputChangeBehavior = Clear
  }
}
module View2D {
  internal {
    frame = "837 397 120 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1800 803 537 431"
        relativePosition = "0.1015 0.0776"
        sizeHint = "400 400"
        wasOpen = yes
      }
    }
  }
  fields {
    instanceName = View2D
    inventorInputOn = TRUE
    inventorOutputOn = FALSE
    view2DExtensionsOn = TRUE
    startSlice = 0
    numSlices = 1
    numXSlices = 1
    sliceStep = 1
    slab = 1
    blendMode = BLEND_REPLACE
    timePoint = 0
    maxTimePoint = 0
    filterMode = FILTER_LINEAR
    standardKeys = TRUE
    cineMode = CINE_ZT
    cineDirection = CINE_FORWARD
    cineRepeat = CINE_ONCE
    cineSpeed = 0.1
    cineAlwaysReset = TRUE
    snapToCenter = TRUE
    zoomMode = VIEW2D_AUTO_ZOOM
    unzoomOnImageChange = FALSE
    sliceZoom = 1
    sliceZoomSynced = 1
    baseColor = "1 1 1"
    margin = "2 2"
    sliceOrigin = "0 0"
    useShaders = TRUE
    useManagedInteraction = FALSE
    lutCenter = 0.970000028610229
    lutWidth = 1
    annotationOn = TRUE
    annotationMode = ANNO_MODE_AUTO
    annotationSizeMode = ANNO_SHOW_DETAILED
    annotationCol = "0.899999976158142 0.899999976158142 0.899999976158142"
    annotationFontSize = ANNO_SIZE_AUTO
    annoCoords = Voxel
    annoCTValue = AsIs
    borderOn = FALSE
    borderColor = "0.899999976158142 0.899999976158142 0.899999976158142"
    valueHighPrecision = TRUE
    maxPrecision = 4
    enableSlicing = TRUE
    showColorChannelValues = FALSE
    colorChannelSeparator = " / "
    useRelativeLUTIfNoInputImage = TRUE
  }
}
module SoAxis {
  internal {
    frame = "629 901 72 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1342 280 436 310"
        relativePosition = "-0.0465 -0.2981"
        sizeHint = "436 310"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = SoAxis
    autoAdjustSettings = TRUE
    axisVolumeSize = "512 512 286"
    axisOn = FALSE
    axisFontSize = 12
    axis1Visibility = TRUE
    axis2Visibility = TRUE
    axis3Visibility = TRUE
    axisNumberingOn = TRUE
    axisSubTickingOn = TRUE
    multiAxisXY = FALSE
    multiAxisXZ = FALSE
    multiAxisYX = FALSE
    multiAxisYZ = FALSE
    multiAxisZX = FALSE
    multiAxisZY = FALSE
    axis1Text = X
    axis2Text = Y
    axis3Text = Z
    numPrefix1Text = ""
    numPrefix2Text = ""
    numPrefix3Text = ""
    numPostfix1Text = ""
    numPostfix2Text = ""
    numPostfix3Text = ""
    axisText1AlignMode = Axis::AXIS_TEXT_ALIGN_LEFT
    axisText2AlignMode = Axis::AXIS_TEXT_ALIGN_LEFT
    axisText3AlignMode = Axis::AXIS_TEXT_ALIGN_LEFT
    axisNumber1AlignMode = Axis::AXIS_TEXT_ALIGN_LEFT
    axisNumber2AlignMode = Axis::AXIS_TEXT_ALIGN_LEFT
    axisNumber3AlignMode = Axis::AXIS_TEXT_ALIGN_LEFT
    axisNumBias = "0 0 0"
    axisNumScale = "1 1 1"
    axisStepSizes = "51.2000007629395 51.2000007629395 28.6000003814697"
    axisOrigin = "0 0 0"
    axisMinEnds = "0 0 0"
    axisMaxEnds = "512 512 286"
    axisMarkerLength = "25.6000003814697 25.6000003814697 14.3000001907349"
    axisTicksMin = "0 0 0"
    axisTicksMax = "512 512 286"
    axis1Color = "1 1 1"
    axis1Transparency = 1
    axis2Color = "1 1 1"
    axis2Transparency = 1
    axis3Color = "1 1 1"
    axis3Transparency = 1
    axisWingLength = "17.0666675567627 17.0666675567627 9.53333377838135"
    axisOverScale = "1.10000002384186 1.10000002384186 1.10000002384186"
    axisSubTickSteps = "0.200000002980232 0.200000002980232 0.200000002980232"
    axisSubTickScales = "0.25 0.25 0.25"
    boxOn = FALSE
    boxColor = "1 1 1"
    boxTransparency = 1
  }
}
module ImageLoad {
  internal {
    frame = "577 997 176 72"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "235 253 473 366"
        relativePosition = "-0.2542 -0.2795"
        sizeHint = "473 366"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = ImageLoad
    filename = "C:/DATA/AHREZ/AhrezPlanner/AHrEZ-2-RSNA/ML-SEGMENTATIONS\\BASEIMAGE.mlimage"
    autoLoad = TRUE
    readRaw = FALSE
    rawX = 1
    rawY = 1
    rawZ = 1
    rawC = 1
    rawT = 1
    rawU = 1
    dataTypeRaw = "unsigned int8"
    planarConfig = Contiguous
    byteOrder = LittleEndian
    dataOffset = 0
    pageSizeHint = "0 0 0 0 0 0"
    suppressErrorLog = FALSE
    dicomIgnoreHalfVoxelShift = FALSE
    enableCheckSumTests = FALSE
  }
}
module SoTransform {
  internal {
    frame = "709 829 104 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1579 1038 440 173"
        relativePosition = "0.0230 0.2464"
        sizeHint = "440 173"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = SoTransform
    translation = "-10 10 20"
    rotation = "0 0 1 0"
    scaleFactor = "0.100000001490116 0.100000001490116 0.100000001490116"
    scaleOrientation = "0 0 1 0"
    center = "0 0 0"
  }
}
module ImageSave {
  internal {
    frame = "685 261 104 72"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "1406 550 595 490"
        relativePosition = "-0.0047 -0.1042"
        sizeHint = "407 490"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = ImageSave
    taskVerboseLogging = FALSE
    filename = C:/DEV/TESTS/gs/gaussian-splatting/_scene_/images/99.jpg
    addFileExtension = TRUE
    format = JPG
    comment = MeVisLab
    allowOverwrite = TRUE
    autoFilename = FALSE
    sourceName = ""
    postfix = .result1
    dicomNameUsed = TRUE
    dicomMetaHeader = TRUE
    dicomDerived = TRUE
    dicomDerivedImageType = "OTHER\\MEVISLAB"
    dicomDiscardTags = FrameSpecific
    dicomStoreTimeInfo = None
    dicomSetWindow = FALSE
    dicomWindowCenter = 0
    dicomWindowWidth = 0
    dicomIgnoreHalfVoxelShift = FALSE
    tiffCompression = LZW
    tiffTileX = 128
    tiffTileY = 128
    tiffTileXAuto = TRUE
    tiffTileYAuto = TRUE
    tiffLinearRGB = FALSE
    saveDicomHeaderOnly = FALSE
    pngCompression = Default
    pngInterlaced = FALSE
    jpegQuality = 75
    jpegProgressive = FALSE
  }
}
module SoCameraAccess {
  internal {
    frame = "473 861 128 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "978 358 1087 739"
        relativePosition = "-0.0576 -0.2421"
        sizeHint = "536 739"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = SoCameraAccess
    transformDeltaOut = "1 5.96046447753906e-08 -7.45058148510225e-09 0
-5.96046447753906e-08 1 -2.1420419216156e-08 0
7.45058015283462e-09 2.1420419216156e-08 1 0
0 0 0 1"
    viewingMatrix = "0.768221497535706 -0.635320901870728 -0.0787619799375534 0
-0.640184223651886 -0.762385010719299 -0.094514362514019 0
-6.33299137575705e-08 0.123030260205269 -0.992402493953705 0
-2.08616256713867e-06 -8.10623168945313e-06 -63.4822540283203 1"
    projectionMatrix = "1.93766462802887 0 0 0
0 2.41421222686768 0 0
1.07030373897032e-07 -1.33353339037967e-07 -1.00199806690216 -1
0 0 -1.08015310764313 0"
    cameraSpaceMatrix = "0.183440864086151 -0.979870438575745 -0.0787621214985847 0
-0.979870438575745 -0.175843954086304 -0.0945144966244698 0
0.0787621214985847 0.0945144966244698 -0.992403030395508 0
-4.76837158203125e-06 -2.38418579101563e-06 -63.482292175293 1"
    camPosition = "-5 -6 -63"
    lookAtPosition = "1.49011611938477e-08 -0.123030245304108 0.992402911186218"
    upVector = "-0.635320901870728 -0.762385010719299 0.123030260205269"
    viewVector = "0.0787618979811668 0.0945141762495041 0.992402911186218"
    viewportSizeOut = "537 431"
    nearDistance = 0.53953755
    farDistance = 540.61768
    NewViewingMatrix = "1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1"
    NewProjectionMatrix = "1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1"
  }
}
module RunPythonScript {
  internal {
    frame = "1113 685 160 56"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "428 156 927 1156"
        relativePosition = "-0.2407 -0.3872"
        sizeHint = "628 303"
        wasOpen = yes
      }
    }
  }
  fields {
    instanceName = ExportForGS
    in0 = ""
    in1 = ""
    in2 = ""
    in3 = ""
    in4 = ""
    in5 = ""
    in6 = ""
    in7 = ""
    in8 = ""
    in9 = ""
    inComment0 = in0
    inComment1 = in1
    inComment2 = in2
    inComment3 = in3
    inComment4 = in4
    inComment5 = in5
    inComment6 = in6
    inComment7 = in7
    inComment8 = in8
    inComment9 = in9
    autoApply0 = TRUE
    autoApply1 = TRUE
    autoApply2 = TRUE
    autoApply3 = TRUE
    autoApply4 = TRUE
    autoApply5 = TRUE
    autoApply6 = TRUE
    autoApply7 = TRUE
    autoApply8 = TRUE
    autoApply9 = TRUE
    out0 = ""
    out1 = ""
    out2 = ""
    out3 = ""
    out4 = ""
    out5 = ""
    out6 = ""
    out7 = ""
    out8 = ""
    out9 = ""
    outComment0 = out0
    outComment1 = out1
    outComment2 = out2
    outComment3 = out3
    outComment4 = out4
    outComment5 = out5
    outComment6 = out6
    outComment7 = out7
    outComment8 = out8
    outComment9 = out9
    initCode = "# For backward compatibility, set up CTX as alias for ctx
CTX = ctx # ctx is the network's context, not RunPythonScript's"
    wakeUpCode = ""
    code = "*import random
import os
import json
import numpy as np

from scipy.spatial.transform import Rotation as R

def quaternion_from_matrix(matrix):
    return R.from_matrix(matrix[:3, :3]).as_quat()  # x, y, z, w

extent = 100
output_path = "C:/DEV/TESTS/gs/gaussian-splatting/_scene_"
transforms = {
    "camera_angle_x": 0.785398,
    "w": 1024,
    "h": 1024,
    "frames": []
}

for i in range(100):
  x = random.randint(-extent,extent)
  y = random.randint(-extent,extent)
  z = random.randint(-extent,extent)
  ctx.field("RotateAtTarget.inPosition").setValue([x,y,z])
  ctx.field("RotateAtTarget.update").touch()
  ctx.field("OffscreenRenderer.update").touch()
  ctx.field("ImageSave.filename").setValue(f"{output_path}/images/{i}.jpg")
  ctx.field("ImageSave.save").touch()
  
  # export camera pose data
  view = ctx.field("SoCameraAccess.viewingMatrix").value
  view_matrix = np.array(view).reshape((4, 4))
  world_matrix = np.linalg.inv(view_matrix).transpose()
  #world_matrix[:3, 2] *= -1  # ← Z-Achse invertieren
  
  
  
  #print("Translation =", world_matrix[:3, 3])
  
  # Extrahiere die Translation (aktuell in Zeile 3)
  #tx, ty, tz = world_matrix[3][:3]

  # Verschiebe Translation in die letzte Spalte jeder Zeile
  #for j in range(3):
  #    world_matrix[j][3] = [tx, ty, tz][j]

  # Setze die letzte Zeile auf [0, 0, 0, 1]
  #world_matrix[3] = [0.0, 0.0, 0.0, 1.0]



  transforms["frames"].append({
        "file_path": f"{i}.jpg",  # relativer Pfad im Zielrepo
        "transform_matrix": world_matrix.tolist()
    })

output_path += "/sparse/0"

# === JSON schreiben ===
with open(os.path.join(output_path, "transforms.json"), "w") as f:
    json.dump(transforms, f, indent=4)

# === COLMAP-export ===
image_width = transforms["w"]
image_height = transforms["h"]
focal_length = (image_width / 2) / np.tan(transforms["camera_angle_x"] / 2)
camera_id = 1

with open(os.path.join(output_path, "cameras.txt"), "w") as f:
    f.write("# Camera list with one line of data per camera:\\n")
    f.write("#   CAMERA_ID, MODEL, WIDTH, HEIGHT, PARAMS[]\\n")
    f.write("# Number of cameras: 1\\n")
    f.write(f"{camera_id} PINHOLE {image_width} {image_height} {focal_length} {focal_length} {image_width/2} {image_height/2}\\n")

with open(os.path.join(output_path, "images.txt"), "w") as f:
    f.write("# Image list with two lines of data per image:\\n")
    f.write("#   IMAGE_ID, QW, QX, QY, QZ, TX, TY, TZ, CAMERA_ID, IMAGE_NAME\\n")
    f.write("#   POINTS2D[] as (X, Y, POINT3D_ID)\\n")

    for i, frame in enumerate(transforms["frames"]):
        matrix = np.array(frame["transform_matrix"]).T  # transponieren
        R_world2cam = matrix[:3, :3].T
        t_world2cam = -R_world2cam @ matrix[:3, 3]

        q = R.from_matrix(R_world2cam).as_quat()  # [x,y,z,w]
        qx, qy, qz, qw = q  # umsortieren zu [qw, qx, qy, qz]

        image_name = frame["file_path"]
        f.write(f"{i+1} {qw} {qx} {qy} {qz} {t_world2cam[0]} {t_world2cam[1]} {t_world2cam[2]} {camera_id} {image_name}\\n")
        f.write("\\n")  # leere Zeile für 2D-Punkte
        

# === NEU: Punktwolke in points3D.txt ===
num_points = 10000
point_extent = 50

with open(os.path.join(output_path, "points3D.txt"), "w") as f:
    f.write("# 3D point list with one line per point:\\n")
    f.write("# POINT3D_ID, X, Y, Z, R, G, B, ERROR, TRACK[] as (IMAGE_ID, POINT2D_IDX)\\n")
    for i in range(1, num_points + 1):
        x = random.uniform(-point_extent, point_extent)
        y = random.uniform(-point_extent, point_extent)
        z = random.uniform(-point_extent, point_extent)
        r = random.randint(100, 255)
        g = random.randint(100, 255)
        b = random.randint(100, 255)
        error = 0.0
        track = "1 0"  # Dummyeintrag: Bild 1, Keypoint 0
        f.write(f"{i} {x} {y} {z} {r} {g} {b} {error} {track}\\n")

print(f"data exported to {output_path}")*"
    finalizeCode = ""
    showFields = FALSE
    showInitCode = FALSE
    showWakeUpCode = FALSE
    showCode = TRUE
    showFinalizeCode = FALSE
    showConsole = FALSE
  }
}
connections {
  SoPerspectiveCamera.position = RotateAtTarget.inPosition
  SoPerspectiveCamera.orientation = RotateAtTarget.outAxisAngleRotation
  OffscreenRenderer.sceneGraph = SoGroup.self
  SoGroup.children = "SoPerspectiveCamera.self SoAxis.self SoCameraAccess.self SoTransform.self AHrEZPlanner.sceneOutput"
  View2D.inInvPreLUT = SoGroup.self
  SoAxis.inputImage = ImageLoad.output0
  ImageSave.input0 = OffscreenRenderer.output0
}
networkModel = ""
