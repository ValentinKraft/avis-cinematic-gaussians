// MDL v1 utf8
mevislabVersion = 4.0.70.335
network {
  watchlist = ""
}
module AHrEZPlanner {
  internal {
    frame = "825 893 112 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "503 147 1702 1141"
        relativePosition = "-0.1064 -0.3937"
        sizeHint = "686 433"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = AHrEZPlanner
  }
}
module RunPythonScript {
  internal {
    frame = "1109 601 232 64"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "290 144 836 989"
        relativePosition = "-0.1312 -0.3741"
        sizeHint = "628 303"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = ExportForCinematicGaussians
    in0 = ""
    in1 = ""
    in2 = ""
    in3 = ""
    in4 = ""
    in5 = ""
    in6 = ""
    in7 = ""
    in8 = ""
    in9 = ""
    inComment0 = in0
    inComment1 = in1
    inComment2 = in2
    inComment3 = in3
    inComment4 = in4
    inComment5 = in5
    inComment6 = in6
    inComment7 = in7
    inComment8 = in8
    inComment9 = in9
    autoApply0 = TRUE
    autoApply1 = TRUE
    autoApply2 = TRUE
    autoApply3 = TRUE
    autoApply4 = TRUE
    autoApply5 = TRUE
    autoApply6 = TRUE
    autoApply7 = TRUE
    autoApply8 = TRUE
    autoApply9 = TRUE
    out0 = ""
    out1 = ""
    out2 = ""
    out3 = ""
    out4 = ""
    out5 = ""
    out6 = ""
    out7 = ""
    out8 = ""
    out9 = ""
    outComment0 = out0
    outComment1 = out1
    outComment2 = out2
    outComment3 = out3
    outComment4 = out4
    outComment5 = out5
    outComment6 = out6
    outComment7 = out7
    outComment8 = out8
    outComment9 = out9
    initCode = "# For backward compatibility, set up CTX as alias for ctx
CTX = ctx # ctx is the network's context, not RunPythonScript's"
    wakeUpCode = ""
    code = "*import random
import os
import json
import numpy as np

extent = 1000
output_path = "C:/DEV/TESTS/gs/cinematic-gaussians/scene"
camera_angle_x_deg = 45.0  # Horizontaler Ã–ffnungswinkel in Grad
transforms = {
    "camera_angle_x": np.deg2rad(camera_angle_x_deg),
    "w": 2048,
    "h": 2048,
    "frames": []
}

for i in range(50):
  x = random.randint(-extent,extent)
  y = random.randint(-extent,extent)
  z = random.randint(-extent,extent)
  ctx.field("RotateAtTarget.inPosition").setValue([x,y,z])
  ctx.field("RotateAtTarget.update").touch()
  ctx.field("OffscreenRenderer.update").touch()
  ctx.field("ImageSave.filename").setValue(f"{output_path}/images/{i}.jpg")
  ctx.field("ImageSave.save").touch()
  
  # export camera pose data
  view = ctx.field("SoCameraAccess.viewingMatrix").value
  view_matrix = np.array(view).reshape((4, 4))
  world_matrix = np.linalg.inv(view_matrix).transpose()
  
  #print("Translation =", world_matrix[:3, 3])

  transforms["frames"].append({
        "file_path": f"{i}.jpg",  # relativer Pfad im Zielrepo
        "transform_matrix": world_matrix.tolist()
    })


# === JSON schreiben ===
with open(os.path.join(output_path, "transforms.json"), "w") as f:
    json.dump(transforms, f, indent=4)

print(f"data exported to {output_path}")*"
    finalizeCode = ""
    showFields = FALSE
    showInitCode = FALSE
    showWakeUpCode = FALSE
    showCode = TRUE
    showFinalizeCode = FALSE
    showConsole = FALSE
  }
}
module SoPerspectiveCamera {
  internal {
    frame = "509 685 152 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1977 198 450 258"
        relativePosition = "0.1401 -0.3570"
        sizeHint = "406 258"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = SoPerspectiveCamera
    viewportMapping = ADJUST_CAMERA
    position = "99 74 10"
    orientation = "0.321634590625763 0.641970038414001 0.696006953716278 2.47054648399353"
    aspectRatio = 1
    nearDistance = 0.53953755
    farDistance = 540.61768
    focalDistance = 1836.3105
    heightAngle = 0.78539819
  }
}
module OffscreenRenderer {
  internal {
    frame = "653 397 168 72"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "1871 737 296 370"
        relativePosition = "0.0869 0.0302"
        sizeHint = "268 370"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = OffscreenRenderer
    transparencyType = BLEND
    imageType = RGB
    bufferType = AUTO
    stencilBuffer = FALSE
    size = "1024 1024"
    pixelScale = 1
    bgColor = "0 0 0"
    enableMultiSampling = FALSE
    multiSampling = 16
  }
}
module SoGroup {
  internal {
    frame = "645 581 184 56"
    moduleGroupName = ""
  }
  fields {
    instanceName = SoGroup
  }
}
module SoCameraAlignedRotation {
  internal {
    frame = "489 773 176 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1580 717 307 66"
        relativePosition = "0.0041 0.0158"
        sizeHint = "279 66"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = SoCameraAlignedRotation
    orientationMode = pointOrientation
    rotationAxis = "0 1 0"
  }
}
module RotateAtTarget {
  internal {
    frame = "313 685 144 56"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "1299 780 370 451"
        relativePosition = "-0.0686 0.0611"
        sizeHint = "339 451"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = RotateAtTarget
    inPosition = "99 74 10"
    inTarget = "0 0 0"
    inUpVector = "0 0 1"
    onInputChangeBehavior = Clear
  }
}
module View2D {
  internal {
    frame = "837 397 120 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1083 58 1680 1298"
        relativePosition = "0.0590 -0.4576"
        sizeHint = "400 400"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = View2D
    inventorInputOn = TRUE
    inventorOutputOn = FALSE
    view2DExtensionsOn = TRUE
    startSlice = 0
    numSlices = 1
    numXSlices = 1
    sliceStep = 1
    slab = 1
    blendMode = BLEND_REPLACE
    timePoint = 0
    maxTimePoint = 0
    filterMode = FILTER_LINEAR
    standardKeys = TRUE
    cineMode = CINE_ZT
    cineDirection = CINE_FORWARD
    cineRepeat = CINE_ONCE
    cineSpeed = 0.1
    cineAlwaysReset = TRUE
    snapToCenter = TRUE
    zoomMode = VIEW2D_AUTO_ZOOM
    unzoomOnImageChange = FALSE
    sliceZoom = 1
    sliceZoomSynced = 1
    baseColor = "1 1 1"
    margin = "2 2"
    sliceOrigin = "0 0"
    useShaders = TRUE
    useManagedInteraction = FALSE
    lutCenter = 0.295000106096268
    lutWidth = 1
    annotationOn = TRUE
    annotationMode = ANNO_MODE_AUTO
    annotationSizeMode = ANNO_SHOW_DETAILED
    annotationCol = "0.899999976158142 0.899999976158142 0.899999976158142"
    annotationFontSize = ANNO_SIZE_AUTO
    annoCoords = Voxel
    annoCTValue = AsIs
    borderOn = FALSE
    borderColor = "0.899999976158142 0.899999976158142 0.899999976158142"
    valueHighPrecision = TRUE
    maxPrecision = 4
    enableSlicing = TRUE
    showColorChannelValues = FALSE
    colorChannelSeparator = " / "
    useRelativeLUTIfNoInputImage = TRUE
  }
}
module SoAxis {
  internal {
    frame = "629 901 72 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1342 280 436 310"
        relativePosition = "-0.0465 -0.2981"
        sizeHint = "436 310"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = SoAxis
    autoAdjustSettings = TRUE
    axisVolumeSize = "512 512 286"
    axisOn = FALSE
    axisFontSize = 12
    axis1Visibility = TRUE
    axis2Visibility = TRUE
    axis3Visibility = TRUE
    axisNumberingOn = TRUE
    axisSubTickingOn = TRUE
    multiAxisXY = FALSE
    multiAxisXZ = FALSE
    multiAxisYX = FALSE
    multiAxisYZ = FALSE
    multiAxisZX = FALSE
    multiAxisZY = FALSE
    axis1Text = X
    axis2Text = Y
    axis3Text = Z
    numPrefix1Text = ""
    numPrefix2Text = ""
    numPrefix3Text = ""
    numPostfix1Text = ""
    numPostfix2Text = ""
    numPostfix3Text = ""
    axisText1AlignMode = Axis::AXIS_TEXT_ALIGN_LEFT
    axisText2AlignMode = Axis::AXIS_TEXT_ALIGN_LEFT
    axisText3AlignMode = Axis::AXIS_TEXT_ALIGN_LEFT
    axisNumber1AlignMode = Axis::AXIS_TEXT_ALIGN_LEFT
    axisNumber2AlignMode = Axis::AXIS_TEXT_ALIGN_LEFT
    axisNumber3AlignMode = Axis::AXIS_TEXT_ALIGN_LEFT
    axisNumBias = "0 0 0"
    axisNumScale = "1 1 1"
    axisStepSizes = "51.2000007629395 51.2000007629395 28.6000003814697"
    axisOrigin = "0 0 0"
    axisMinEnds = "0 0 0"
    axisMaxEnds = "512 512 286"
    axisMarkerLength = "25.6000003814697 25.6000003814697 14.3000001907349"
    axisTicksMin = "0 0 0"
    axisTicksMax = "512 512 286"
    axis1Color = "1 1 1"
    axis1Transparency = 1
    axis2Color = "1 1 1"
    axis2Transparency = 1
    axis3Color = "1 1 1"
    axis3Transparency = 1
    axisWingLength = "17.0666675567627 17.0666675567627 9.53333377838135"
    axisOverScale = "1.10000002384186 1.10000002384186 1.10000002384186"
    axisSubTickSteps = "0.200000002980232 0.200000002980232 0.200000002980232"
    axisSubTickScales = "0.25 0.25 0.25"
    boxOn = FALSE
    boxColor = "1 1 1"
    boxTransparency = 1
  }
}
module ImageLoad {
  internal {
    frame = "641 1197 176 72"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "235 253 473 366"
        relativePosition = "-0.2542 -0.2795"
        sizeHint = "473 366"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = ImageLoad
    filename = "C:/DATA/AHREZ/AhrezPlanner/AHrEZ-2-RSNA/ML-SEGMENTATIONS\\BASEIMAGE.mlimage"
    autoLoad = TRUE
    readRaw = FALSE
    rawX = 1
    rawY = 1
    rawZ = 1
    rawC = 1
    rawT = 1
    rawU = 1
    dataTypeRaw = "unsigned int8"
    planarConfig = Contiguous
    byteOrder = LittleEndian
    dataOffset = 0
    pageSizeHint = "0 0 0 0 0 0"
    suppressErrorLog = FALSE
    dicomIgnoreHalfVoxelShift = FALSE
    enableCheckSumTests = FALSE
  }
}
module SoTransform {
  internal {
    frame = "709 829 104 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1577 1037 440 173"
        relativePosition = "0.0224 0.2457"
        sizeHint = "440 173"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = SoTransform
    translation = "-10 10 20"
    rotation = "0 0 1 0"
    scaleFactor = "0.100000001490116 0.100000001490116 0.100000001490116"
    scaleOrientation = "0 0 1 0"
    center = "0 0 0"
  }
}
module ImageSave {
  internal {
    frame = "685 261 104 72"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "1406 550 595 490"
        relativePosition = "-0.0047 -0.1042"
        sizeHint = "407 490"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = ImageSave
    taskVerboseLogging = FALSE
    filename = C:/DEV/TESTS/gs/gaussian-splatting/_scene_/images/99.jpg
    addFileExtension = TRUE
    format = JPG
    comment = MeVisLab
    allowOverwrite = TRUE
    autoFilename = FALSE
    sourceName = ""
    postfix = .result1
    dicomNameUsed = TRUE
    dicomMetaHeader = TRUE
    dicomDerived = TRUE
    dicomDerivedImageType = "OTHER\\MEVISLAB"
    dicomDiscardTags = FrameSpecific
    dicomStoreTimeInfo = None
    dicomSetWindow = FALSE
    dicomWindowCenter = 0
    dicomWindowWidth = 0
    dicomIgnoreHalfVoxelShift = FALSE
    tiffCompression = LZW
    tiffTileX = 128
    tiffTileY = 128
    tiffTileXAuto = TRUE
    tiffTileYAuto = TRUE
    tiffLinearRGB = FALSE
    saveDicomHeaderOnly = FALSE
    pngCompression = Default
    pngInterlaced = FALSE
    jpegQuality = 75
    jpegProgressive = FALSE
  }
}
module SoCameraAccess {
  internal {
    frame = "473 861 128 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1585 472 1087 739"
        relativePosition = "0.1189 -0.1602"
        sizeHint = "536 739"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = SoCameraAccess
    transformDeltaOut = "0.8233243227005 -0.402256548404694 0.400408208370209 0
0.0457703620195389 0.750235259532928 0.659584820270538 0
-0.565722644329071 -0.524725377559662 0.636098384857178 0
0 0 0 1"
    viewingMatrix = "-0.59870457649231 -0.0645922347903252 0.798361241817474 0
0.800969839096069 -0.0482810549438 0.596754670143127 0
-1.11758717835642e-08 0.996743083000183 0.0806424543261528 0
-1.51544809341431e-05 -1.9073486328125e-06 -124.004043579102 1"
    projectionMatrix = "2.41421389579773 0 0 0
0 2.41421365737915 0 0
-1.33353424303095e-07 1.0001505756918e-07 -1.00199806690216 -1
0 0 -1.08015310764313 0"
    cameraSpaceMatrix = "0.410183846950531 -0.440872609615326 0.79836106300354 0
-0.440872609615326 0.670458912849426 0.596754610538483 0
-0.79836106300354 -0.596754610538483 0.0806427597999573 0
-1.66893005371094e-05 -2.52723693847656e-05 -124.004013061523 1"
    camPosition = "99 74 10"
    lookAtPosition = "-5.96046447753906e-08 -0.996743023395538 -0.0806425213813782"
    upVector = "-0.0645922347903252 -0.0482810549438 0.996743083000183"
    viewVector = "-0.79836118221283 -0.596754848957062 -0.08064254373312"
    viewportSizeOut = "1024 1024"
    nearDistance = 0.53953755
    farDistance = 540.61768
    NewViewingMatrix = "1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1"
    NewProjectionMatrix = "1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1"
  }
}
module RunPythonScript {
  internal {
    frame = "1113 685 160 56"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "754 170 1211 1156"
        relativePosition = "-0.1047 -0.3772"
        sizeHint = "628 303"
        wasOpen = yes
      }
    }
  }
  fields {
    instanceName = ExportForGS
    in0 = ""
    in1 = ""
    in2 = ""
    in3 = ""
    in4 = ""
    in5 = ""
    in6 = ""
    in7 = ""
    in8 = ""
    in9 = ""
    inComment0 = in0
    inComment1 = in1
    inComment2 = in2
    inComment3 = in3
    inComment4 = in4
    inComment5 = in5
    inComment6 = in6
    inComment7 = in7
    inComment8 = in8
    inComment9 = in9
    autoApply0 = TRUE
    autoApply1 = TRUE
    autoApply2 = TRUE
    autoApply3 = TRUE
    autoApply4 = TRUE
    autoApply5 = TRUE
    autoApply6 = TRUE
    autoApply7 = TRUE
    autoApply8 = TRUE
    autoApply9 = TRUE
    out0 = ""
    out1 = ""
    out2 = ""
    out3 = ""
    out4 = ""
    out5 = ""
    out6 = ""
    out7 = ""
    out8 = ""
    out9 = ""
    outComment0 = out0
    outComment1 = out1
    outComment2 = out2
    outComment3 = out3
    outComment4 = out4
    outComment5 = out5
    outComment6 = out6
    outComment7 = out7
    outComment8 = out8
    outComment9 = out9
    initCode = "# For backward compatibility, set up CTX as alias for ctx
CTX = ctx # ctx is the network's context, not RunPythonScript's"
    wakeUpCode = ""
    code = "*import random
import os
import json
import numpy as np

from scipy.spatial.transform import Rotation as R

out_path = "C:/DEV/TESTS/gs/gaussian-splatting/_scene_"
transforms = {
    "camera_angle_x": 0.785398,
    "w": 1024,
    "h": 1024,
    "frames": []
}

def quaternion_from_matrix(matrix):
    return R.from_matrix(matrix[:3, :3]).as_quat()  # x, y, z, w
    
def generate_weighted_splats_from_image(num_points=5000, output_path="points3D.txt"):
  
    output_path += "/sparse/0/points3D.txt"
    image = ctx.field("Vesselness.output0").image()
    if not image:
        print("Kein Bild gefunden.")
        return

    # Hole gesamten Bildbereich (Tile)
    tile = image.getTile((0, 0, 0, 0, 0, 0), image.imageExtent())
    if tile is None:
        print("Tile nicht gefunden.")
        return

    # In NumPy-Array umwandeln
    arr = np.array(tile, dtype=np.float32)
    
    # Falls zusÃ¤tzliche Dimensionen existieren, diese entfernen
    while arr.ndim > 3:
      arr = arr[0]

    # BildgrÃ¶ÃŸen und Weltinformationen
    dims = image.imageExtent()[1:4]  # (x,y,z)
    spacing = image.voxelSize()
    print(f"Spacing: {spacing}")
    m = image.voxelToWorldMatrix()#.getTranslation()
    origin = [m[0][3],m[1][3],m[2][3]]
    print(f"Origin: {origin}")

    # Wahrscheinlichkeitsverteilung erstellen (z.â€¯B. Werte > 0)
    arr_flat = arr.flatten()
    arr_flat[arr_flat < 0] = 0  # nur positive Werte erlauben
    total = np.sum(arr_flat)
    if total == 0:
        print("Alle Bildwerte sind 0.")
        return
    probs = arr_flat / total

    # Indexpositionen fÃ¼r Sampling
    all_indices = np.arange(len(arr_flat))

    # Ziehe Indizes gemÃ¤ÃŸ Gewichtung
    chosen_indices = np.random.choice(all_indices, size=num_points, replace=False, p=probs)

    # Berechne Voxel-Koordinaten (z,y,x Reihenfolge beachten!)
    coords = np.unravel_index(chosen_indices, arr.shape)
    voxel_coords = np.stack(coords, axis=-1)  # (z, y, x)

    # points3D.txt schreiben
    with open(output_path, "w") as f:
        f.write("# 3D point list with one line per point:\\n")
        f.write("# POINT3D_ID, X, Y, Z, R, G, B, ERROR, TRACK[] as (IMAGE_ID, POINT2D_IDX)\\n")

        for i, (z, y, x) in enumerate(voxel_coords, 1):
            # Weltkoordinaten berechnen
            wx = (origin[0] + x) /-100.0 * spacing[0]
            wy = (origin[1] + y) /-100.0 * spacing[1]
            wz = (origin[2] + z) /-100.0 * spacing[2]

            # Farbe zufÃ¤llig oder abhÃ¤ngig vom Bildwert
            r = random.randint(200, 255)
            g = random.randint(200, 255)
            b = random.randint(200, 255)

            f.write(f"{i} {wx:.6f} {wy:.6f} {wz:.6f} {r} {g} {b} 0.0 1 0 2 0\\n")

    print(f"[âœ“] {num_points} gewichtete Punkte aus Bild gespeichert nach: {output_path}")

def render_images_and_generate_cameras_txt(num_imgs=100, output_path="", extent=100):
  
  image_width = transforms["w"]
  image_height = transforms["h"]
  focal_length = (image_width / 2) / np.tan(transforms["camera_angle_x"] / 2)
  camera_id = 1
  
  # render random cams and render images
  with open(os.path.join(output_path+"/sparse/0", "images.txt"), "w") as f:
    
    f.write("# Image list with two lines of data per image:\\n")
    f.write("#   IMAGE_ID, QW, QX, QY, QZ, TX, TY, TZ, CAMERA_ID, IMAGE_NAME\\n")
    f.write("#   POINTS2D[] as (X, Y, POINT3D_ID)\\n")

    for i in range(num_imgs):
      x = random.randint(-extent,extent)
      y = random.randint(-extent,extent)
      z = random.randint(-extent,extent)
      ctx.field("RotateAtTarget.inPosition").setValue([x,y,z])
      ctx.field("RotateAtTarget.update").touch()
      ctx.field("OffscreenRenderer.update").touch()
      ctx.field("ImageSave.filename").setValue(f"{output_path}/images/{i}.jpg")
      ctx.field("ImageSave.save").touch()

      rot = ctx.field("RotateAtTarget.outQuaternionRotation").value
      
      # Original Quaternion von Kamera zu Welt
      q_wc = [rot[3], rot[0], rot[1], rot[2]]
      r_wc = R.from_quat([rot[0], rot[1], rot[2], rot[3]])  # [x, y, z, w]
      r_cw = r_wc.inv()
      
      qx, qy, qz, qw = r_cw.as_quat()

      # Kamerazentrum
      C = np.array([x / 100.0, y / 100.0, z / 100.0])
      t = -r_cw.as_matrix() @ C
      
      f.write(f"{i+1} {qw} {qx} {qy} {qz} {t[0]} {t[1]} {t[2]} {camera_id} {i}.jpg\\n")
  
  print(f"data exported to {output_path}")
  
##############################################

generate_weighted_splats_from_image(
    num_points=10000,
    output_path=out_path
)
render_images_and_generate_cameras_txt(100,out_path)*"
    finalizeCode = ""
    showFields = FALSE
    showInitCode = FALSE
    showWakeUpCode = FALSE
    showCode = TRUE
    showFinalizeCode = FALSE
    showConsole = FALSE
  }
}
module RunPythonScript {
  internal {
    frame = "1121 781 160 56"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "1432 338 826 981"
        relativePosition = "0.0363 -0.2565"
        sizeHint = "628 303"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = ExportRandomPoints
    in0 = ""
    in1 = ""
    in2 = ""
    in3 = ""
    in4 = ""
    in5 = ""
    in6 = ""
    in7 = ""
    in8 = ""
    in9 = ""
    inComment0 = in0
    inComment1 = in1
    inComment2 = in2
    inComment3 = in3
    inComment4 = in4
    inComment5 = in5
    inComment6 = in6
    inComment7 = in7
    inComment8 = in8
    inComment9 = in9
    autoApply0 = TRUE
    autoApply1 = TRUE
    autoApply2 = TRUE
    autoApply3 = TRUE
    autoApply4 = TRUE
    autoApply5 = TRUE
    autoApply6 = TRUE
    autoApply7 = TRUE
    autoApply8 = TRUE
    autoApply9 = TRUE
    out0 = ""
    out1 = ""
    out2 = ""
    out3 = ""
    out4 = ""
    out5 = ""
    out6 = ""
    out7 = ""
    out8 = ""
    out9 = ""
    outComment0 = out0
    outComment1 = out1
    outComment2 = out2
    outComment3 = out3
    outComment4 = out4
    outComment5 = out5
    outComment6 = out6
    outComment7 = out7
    outComment8 = out8
    outComment9 = out9
    initCode = "# For backward compatibility, set up CTX as alias for ctx
CTX = ctx # ctx is the network's context, not RunPythonScript's"
    wakeUpCode = ""
    code = "*import random

def generate_random_colmap_points3d(
    num_points: int = 1000,
    output_path: str = "points3D.txt",
    xyz_range: float = 10.0,
    default_error: float = 0.0
):
    with open(output_path, 'w') as f:
        f.write("# 3D point list with one line per point:\\n")
        f.write("# POINT3D_ID, X, Y, Z, R, G, B, ERROR, TRACK[] as (IMAGE_ID, POINT2D_IDX)\\n")

        for point_id in range(1, num_points + 1):
            # ZufÃ¤llige Koordinaten im gewÃ¤hlten Bereich
            x = random.uniform(-xyz_range, xyz_range)
            y = random.uniform(-xyz_range, xyz_range)
            z = random.uniform(-xyz_range, xyz_range)

            # ZufÃ¤llige Farbe (COLMAP erwartet 0â€“255)
            r = random.randint(0, 255)
            g = random.randint(0, 255)
            b = random.randint(0, 255)

            # Dummy-Track: referenziert Bild-ID 1 und Punktindex 0
            track = "1 0"

            line = f"{point_id} {x} {y} {z} {r} {g} {b} {default_error} {track}\\n"
            f.write(line)

    print(f"COLMAP points3D.txt mit {num_points} Punkten gespeichert unter: {output_path}")



generate_random_colmap_points3d(
    num_points=5000,
    output_path="C:/DEV/TESTS/gs/_scene_/sparse/0/points3D.txt",
    xyz_range=1.0
)*"
    finalizeCode = ""
    showFields = FALSE
    showInitCode = FALSE
    showWakeUpCode = FALSE
    showCode = TRUE
    showFinalizeCode = FALSE
    showConsole = FALSE
  }
}
module SubImage {
  internal {
    frame = "853 789 88 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1347 456 397 540"
        relativePosition = "-0.0506 -0.1717"
        sizeHint = "397 540"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = HA
    boxInput = "0 0 0 0 0 0 -1 -1 -1 -1 -1 -1"
    autoApplyBox = FALSE
    correctForNegativeSubImageExtents = FALSE
    enableBoxClamping = FALSE
    x = 0
    sx = 32
    modifyX = FALSE
    y = 0
    sy = 32
    modifyY = FALSE
    z = 0
    sz = 32
    modifyZ = FALSE
    c = 8
    sc = 1
    modifyC = TRUE
    t = 0
    st = 1
    modifyT = FALSE
    u = 0
    su = 1
    modifyU = FALSE
    fillValue = 0
    mode = VoxelStartSize
    autoApply = TRUE
  }
}
module FastMorphology {
  internal {
    frame = "861 685 152 72"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "1547 553 344 395"
        relativePosition = "-0.0003 -0.1020"
        sizeHint = "344 395"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = FastMorphology
    morphologicOperation = Dilation
    xSize = 2
    ySize = 2
    zSize = 2
    cSize = 0
    tSize = 0
    uSize = 0
    useInputMaxValue = FALSE
    userSetMaxValue = 1
    autoUpdate = TRUE
    useGreyScaleMorphology = TRUE
    boundaryHandling = "Propagate boundary values"
    boundaryFillValue = 0
  }
}
module Vesselness {
  internal {
    frame = "873 597 96 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "931 318 214 365"
        relativePosition = "-0.1983 -0.2708"
        sizeHint = "214 365"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = Vesselness
    startSigma = 0.5
    endSigma = 3
    nbrOfScales = 3
    unit = voxel
    calc2D = FALSE
    normalizedMeasure = TRUE
    darkVessels = FALSE
    autoUpdate = TRUE
  }
}
module RunPythonScript {
  internal {
    frame = "1113 857 160 64"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "398 185 1022 1143"
        relativePosition = "-0.2358 -0.3664"
        sizeHint = "628 303"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = ExportMaskPoints
    in0 = ""
    in1 = ""
    in2 = ""
    in3 = ""
    in4 = ""
    in5 = ""
    in6 = ""
    in7 = ""
    in8 = ""
    in9 = ""
    inComment0 = in0
    inComment1 = in1
    inComment2 = in2
    inComment3 = in3
    inComment4 = in4
    inComment5 = in5
    inComment6 = in6
    inComment7 = in7
    inComment8 = in8
    inComment9 = in9
    autoApply0 = TRUE
    autoApply1 = TRUE
    autoApply2 = TRUE
    autoApply3 = TRUE
    autoApply4 = TRUE
    autoApply5 = TRUE
    autoApply6 = TRUE
    autoApply7 = TRUE
    autoApply8 = TRUE
    autoApply9 = TRUE
    out0 = ""
    out1 = ""
    out2 = ""
    out3 = ""
    out4 = ""
    out5 = ""
    out6 = ""
    out7 = ""
    out8 = ""
    out9 = ""
    outComment0 = out0
    outComment1 = out1
    outComment2 = out2
    outComment3 = out3
    outComment4 = out4
    outComment5 = out5
    outComment6 = out6
    outComment7 = out7
    outComment8 = out8
    outComment9 = out9
    initCode = "# For backward compatibility, set up CTX as alias for ctx
CTX = ctx # ctx is the network's context, not RunPythonScript's"
    wakeUpCode = ""
    code = "*import random
import numpy as np

def generate_weighted_splats_from_image(num_points=5000, output_path="points3D.txt"):
    image = ctx.field("Vesselness.output0").image()
    if not image:
        print("Kein Bild gefunden.")
        return

    # Hole gesamten Bildbereich (Tile)
    tile = image.getTile((0, 0, 0, 0, 0, 0), image.imageExtent())
    if tile is None:
        print("Tile nicht gefunden.")
        return

    # In NumPy-Array umwandeln
    arr = np.array(tile, dtype=np.float32)
    
    # Falls zusÃ¤tzliche Dimensionen existieren, diese entfernen
    while arr.ndim > 3:
      arr = arr[0]

    # BildgrÃ¶ÃŸen und Weltinformationen
    dims = image.imageExtent()[1:4]  # (x,y,z)
    spacing = image.voxelSize()
    print(f"Spacing: {spacing}")
    m = image.voxelToWorldMatrix()#.getTranslation()
    origin = [m[0][3],m[1][3],m[2][3]]
    print(f"Origin: {origin}")

    # Wahrscheinlichkeitsverteilung erstellen (z.â€¯B. Werte > 0)
    arr_flat = arr.flatten()
    arr_flat[arr_flat < 0] = 0  # nur positive Werte erlauben
    total = np.sum(arr_flat)
    if total == 0:
        print("Alle Bildwerte sind 0.")
        return
    probs = arr_flat / total

    # Indexpositionen fÃ¼r Sampling
    all_indices = np.arange(len(arr_flat))

    # Ziehe Indizes gemÃ¤ÃŸ Gewichtung
    chosen_indices = np.random.choice(all_indices, size=num_points, replace=False, p=probs)

    # Berechne Voxel-Koordinaten (z,y,x Reihenfolge beachten!)
    coords = np.unravel_index(chosen_indices, arr.shape)
    voxel_coords = np.stack(coords, axis=-1)  # (z, y, x)

    # points3D.txt schreiben
    with open(output_path, "w") as f:
        f.write("# 3D point list with one line per point:\\n")
        f.write("# POINT3D_ID, X, Y, Z, R, G, B, ERROR, TRACK[] as (IMAGE_ID, POINT2D_IDX)\\n")

        for i, (z, y, x) in enumerate(voxel_coords, 1):
            # Weltkoordinaten berechnen
            wx = (origin[0] + x) /-1000.0 * spacing[0]
            wy = (origin[1] + y) /-1000.0 * spacing[1]
            wz = (origin[2] + z) /-1000.0 * spacing[2]

            # Farbe zufÃ¤llig oder abhÃ¤ngig vom Bildwert
            r = random.randint(0, 255)
            g = random.randint(0, 255)
            b = random.randint(0, 255)

            f.write(f"{i} {wx:.6f} {wy:.6f} {wz:.6f} {r} {g} {b} 0.0 1 0\\n")

    print(f"[âœ“] {num_points} gewichtete Punkte aus Bild gespeichert nach: {output_path}")



generate_weighted_splats_from_image(
    num_points=5000,
    output_path="C:/DEV/TESTS/gs/_scene_/sparse/0/points3D.txt"
)*"
    finalizeCode = ""
    showFields = FALSE
    showInitCode = FALSE
    showWakeUpCode = FALSE
    showCode = TRUE
    showFinalizeCode = FALSE
    showConsole = FALSE
  }
}
module Info {
  internal {
    frame = "753 969 128 80"
    moduleGroupName = ""
    showNetworkPanel = true
    windows {
      window _default {
        geometry = "1443 560 552 380"
        relativePosition = "-0.0003 -0.0970"
        sizeHint = "552 380"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = Info
  }
}
module SubImage {
  internal {
    frame = "685 1117 88 56"
    moduleGroupName = ""
    windows {
      window _default {
        geometry = "1521 480 397 540"
        relativePosition = "0.0000 -0.1545"
        sizeHint = "397 540"
        wasOpen = no
      }
    }
  }
  fields {
    instanceName = SubImage
    boxInput = "0 0 0 0 0 0 -1 -1 -1 -1 -1 -1"
    autoApplyBox = FALSE
    correctForNegativeSubImageExtents = FALSE
    enableBoxClamping = FALSE
    x = 0
    sx = 32
    modifyX = FALSE
    y = 0
    sy = 32
    modifyY = FALSE
    z = 0
    sz = 32
    modifyZ = FALSE
    c = 0
    sc = 1
    modifyC = FALSE
    t = 0
    st = 1
    modifyT = TRUE
    u = 0
    su = 1
    modifyU = FALSE
    fillValue = 0
    mode = VoxelStartSize
    autoApply = TRUE
  }
}
connections {
  SoPerspectiveCamera.position = RotateAtTarget.inPosition
  SoPerspectiveCamera.orientation = RotateAtTarget.outAxisAngleRotation
  OffscreenRenderer.sceneGraph = SoGroup.self
  SoGroup.children = "SoPerspectiveCamera.self SoAxis.self SoCameraAccess.self SoTransform.self AHrEZPlanner.sceneOutput"
  View2D.inInvPreLUT = SoGroup.self
  SoAxis.inputImage = SubImage.output0
  ImageSave.input0 = OffscreenRenderer.output0
  HA.input0 = AHrEZPlanner.outSegmentationMasks
  FastMorphology.input0 = HA.output0
  Vesselness.input0 = SubImage.output0
  Vesselness.input1 = FastMorphology.output0
  Info.input0 = SubImage.output0
  SubImage.input0 = ImageLoad.output0
}
networkModel = ""
